WEBVTT

1
00:00:02.100 --> 00:00:23.040
Xing Chen: Okay. Well, good morning, everyone. Great to see you. Today I'm going to talk about the importance of version control and I have to warn you that this is one of my favorite topics. So it's something that is extremely important and has helped me a lot during my mind scientific career.

2
00:00:24.630 --> 00:00:25.320
Xing Chen: And so

3
00:00:26.460 --> 00:00:35.700
Xing Chen: What, what do you think of when you think of version control. Some people may have an idea of what that is and others may not. So I'm going to start from the very beginning.

4
00:00:36.540 --> 00:00:41.130
Xing Chen: So when you're doing a PhD project or any kind of scientific project.

5
00:00:41.850 --> 00:00:54.030
Xing Chen: I can liken these projects to trees. So they start out with a very specific idea of what you want to accomplish, you have certain objectives and then you have an idea of how you're going to reach your goals.

6
00:00:54.570 --> 00:01:02.580
Xing Chen: And then after a while your project start growing more and more complex and branching off and before you know it.

7
00:01:03.330 --> 00:01:13.080
Xing Chen: Your analyses and your, your projects are pretty complicated. And so this is an example from my own PhD, many years ago.

8
00:01:13.740 --> 00:01:23.370
Xing Chen: When I started out with a particular plan of what I was going to achieve over four years. I was going to do three sets of experiments.

9
00:01:23.820 --> 00:01:45.570
Xing Chen: But this is how it actually ended up so I only accomplished two out of the three sets of experiments. It took me about six years to do the whole thing. And this went out the window. And so this is this is pretty typical, I think, in many cases, things often take a lot longer than you expect.

10
00:01:48.330 --> 00:02:00.330
Xing Chen: And also when you do your data analysis, you have a particular method of analyzing data and then you think, Okay, that didn't really work. I'll try something else. Maybe try

11
00:02:01.080 --> 00:02:12.000
Xing Chen: A different technique or a different method or your professor stays. Okay, try this and this and this. And then before you know it, you have tried a few different things.

12
00:02:12.540 --> 00:02:21.090
Xing Chen: And and then you start forgetting what you did in the first place. So it can be difficult to keep track, especially after a few months go by.

13
00:02:21.750 --> 00:02:37.560
Xing Chen: You eventually start collecting data, you generate figures tables results you perform different types of analysis, you have different analysis grips you have different statistical outputs and you get this kind of explosion. So, so that's the tree that I'm talking about.

14
00:02:38.760 --> 00:02:51.270
Xing Chen: And also in the beginning when it starts up simple you can keep track of things about at some point if it starts getting more difficult. And it can be difficult to stay disciplined.

15
00:02:51.720 --> 00:03:04.230
Xing Chen: And keep a record a systematic record of what you have done because in the beginning, it seems manageable. But at some point, you will need to look through your old code.

16
00:03:05.400 --> 00:03:14.490
Xing Chen: Probably to remember what you did. Are you might need to go through your folders and retrieve data and you might have to repeat analyses and some

17
00:03:15.360 --> 00:03:27.000
Xing Chen: Let's say you did something in the beginning, and then you tried a whole bunch of different stuff and then you decided, okay, actually what I did early on was better. And then you have to repeat it to make sure that you are doing it really correctly.

18
00:03:28.890 --> 00:03:39.870
Xing Chen: And then there's another issue where a lot of us we have different computers in different locations. So we might work on our laptop or we might have our PCs.

19
00:03:40.440 --> 00:03:53.010
Xing Chen: In our office or in the lab or work from a cluster and your university or at home. You might even have collaborators across the world, with whom you need to share data.

20
00:03:53.850 --> 00:04:00.420
Xing Chen: Or you might need to analyze the data together, maybe they need to use your code or vice versa and

21
00:04:00.840 --> 00:04:16.200
Xing Chen: You end up sharing data and code. And there's different ways that you can share data. If it's a huge amount. You could use an FTP server. Maybe you could just transfer it on Dropbox or email if it's not too much or the cloud or you could put your data onto a hard drive and send it over.

22
00:04:18.720 --> 00:04:28.230
Xing Chen: Okay, so there's all these different issues that huge amount of data, different types of sentences, the different PCs that using and having to share data with others.

23
00:04:28.950 --> 00:04:43.980
Xing Chen: Unfortunately, this is a problem that's been tackled before there's all kinds of software tools to help you and also to take care of the process for you. By automating it so that you don't always have to remember to do it yourself.

24
00:04:45.660 --> 00:04:46.290
Xing Chen: And so

25
00:04:47.610 --> 00:04:56.640
Xing Chen: Back to the question, what is a version control system. So let's say that on day one, you did a pretty good analysis and you call that version one on day two.

26
00:04:57.660 --> 00:05:13.710
Xing Chen: That's version 1.2 and so on. So you get a bunch of different versions of your analysis and results over the different days. And in the end, after a year you have version 10 point 13 or after a lot longer, you have

27
00:05:15.630 --> 00:05:18.330
Xing Chen: Your version that could run to the hundreds even

28
00:05:19.770 --> 00:05:28.440
Xing Chen: And so a version control system keeps track of what you did at every point in time. So it's almost like take snapshots.

29
00:05:29.130 --> 00:05:44.520
Xing Chen: And it saves this history for that you can go back and look at what was done at every moment. So a good first control system that's you even wrote back changes. So let's say that you did an analysis.

30
00:05:45.960 --> 00:05:56.130
Xing Chen: And it, it was pretty much working and then you changed a few things and you broke your code and then it stopped working and then you desperately want to go back to the point where

31
00:05:56.550 --> 00:06:08.010
Xing Chen: It used to be working. And the nice thing about motion control is that you can roll back changes and go to a previous state that your code within and let's say that you

32
00:06:09.210 --> 00:06:15.960
Xing Chen: You you have that working codes you made a few changes that would good and then you broke something.

33
00:06:16.260 --> 00:06:30.360
Xing Chen: You can also choose how far back in time to go and you don't necessarily have to lose everything that you did after that point in time. So you can retrieve that one snapshot without losing the subsequent snapshots.

34
00:06:31.710 --> 00:06:39.180
Xing Chen: It allows you to semi automatically save us to synchronize your data across multiple locations.

35
00:06:40.050 --> 00:06:50.430
Xing Chen: So imagine that you collect the data in the lab and you have a lab computer there and then you need to analyze your data on your PC in the office so

36
00:06:51.030 --> 00:07:02.880
Xing Chen: Version Control system can help you to sync your files across multiple locations so that you're not saving your code on one computer and then copying it to the other computer, etc.

37
00:07:04.200 --> 00:07:10.620
Xing Chen: And let's say that your hard drive crashes. It can happen. It's happened to me before, and

38
00:07:11.370 --> 00:07:26.010
Xing Chen: If you haven't backed up your data recently, of course, they're going to lose it, but at least the version control system can help you to automatically save data and it will help you also to restore the data. If one of your repositories get lost.

39
00:07:29.160 --> 00:07:40.650
Xing Chen: Okay, so you can easily check what you did before you can retrieve the files from a previous date and can review what changes. He did over time that can also be useful if you want to remember

40
00:07:41.190 --> 00:07:54.330
Xing Chen: What was the rationale for having chosen particular data analysis, for example, and many more. And it allows you to recover your files relatively painlessly if you lose them.

41
00:07:56.250 --> 00:08:00.630
Xing Chen: Okay, so some basic examples and the same one. If any questions right now.

42
00:08:03.510 --> 00:08:17.640
Xing Chen: No. Okay. So I think probably a lot of people are familiar with Dropbox. So let's start with this example. By default, the free version of Dropbox. It saves your deleted and previous versions of your files for one month.

43
00:08:18.300 --> 00:08:37.020
Xing Chen: And with subscription, it's possible to increase this duration to 180 days. And so in the Dropbox interface. For example, let's say I have a particular document in my folder I can right click on that and then I can look at previous versions.

44
00:08:38.160 --> 00:08:43.650
Xing Chen: And here it will show me a list of the versions that it automatically saved.

45
00:08:44.910 --> 00:08:49.410
Xing Chen: So that could be handy if you want to roll back your changes to previous day.

46
00:08:51.660 --> 00:09:06.540
Xing Chen: Okay, another nice example that I used to use a lot was a plugin for Microsoft Word and I used it when I was writing my thesis, because I was very paranoid about losing the, the new edits that I had made

47
00:09:07.800 --> 00:09:10.380
Xing Chen: So I use this plugin called also history.

48
00:09:11.550 --> 00:09:17.130
Xing Chen: Which basically makes automatic backups of your documents that preset intervals and

49
00:09:18.060 --> 00:09:36.030
Xing Chen: Basically my my thesis document was so big that it would take a few seconds for auto history to save an automatic copy but it was more than worth it. So there were definitely times when I had to retrieve my files because my my document crash or something.

50
00:09:38.160 --> 00:09:51.540
Xing Chen: Okay, so this is some again. To give you an idea of how it looks in Microsoft Word where you can see the different versions. And if you need to recover something you can click on Manage versions and then recover the documents.

51
00:09:52.770 --> 00:10:02.970
Xing Chen: And of course the layout of these tools is going to be different and different versions of work, but you can always check out what is relevant to your specific situation.

52
00:10:05.010 --> 00:10:15.780
Xing Chen: And so those were two tools that could be used. And I'm going to go more specifically into the kind of VCs that you can use with your code.

53
00:10:16.560 --> 00:10:28.620
Xing Chen: And so firstly I'd like to introduce the concept of a distributed version control system where you have a copy of your, your data and all your code.

54
00:10:29.130 --> 00:10:39.630
Xing Chen: On multiple at multiple locations. So let's say that you collected data and lab on computer eight and then you analyze the data in your office on computer be

55
00:10:40.020 --> 00:10:51.630
Xing Chen: And you also have a server somewhere in your institute that has a copy of the data at the backup. And so what a distributed version control system does is

56
00:10:52.380 --> 00:11:02.640
Xing Chen: It communicates between these three locations. It has a record of kind of log file of what has been done to keep track off the different files and the different versions.

57
00:11:03.180 --> 00:11:10.230
Xing Chen: And then automatically compares them and checks to see if there's any changes or if there's anything that needs to be synchronized.

58
00:11:12.990 --> 00:11:27.060
Xing Chen: Okay, so, um, how to these types of software and make snapshots of your code. There's a few different methods. So the first one is to keep track of only the changes.

59
00:11:28.200 --> 00:11:33.420
Xing Chen: Let me explain this a little bit. So let's say that I have my file and I have

60
00:11:34.560 --> 00:11:39.330
Xing Chen: Different version of it over time. So I start from ones and then my end at five.

61
00:11:40.350 --> 00:11:52.470
Xing Chen: And so I'm in the first file. Let's see. I have a file eight I made a change to it. And then I'm actually let me explain this differently.

62
00:11:53.550 --> 00:12:04.380
Xing Chen: Um, the versions over here. These actually snapshots. So my software has made size snapshots over time. And the first time points I have these three files.

63
00:12:05.340 --> 00:12:14.730
Xing Chen: And at the second time flying it sees that I made a change to one of the files a and also to file. See if I didn't make a change to file be

64
00:12:15.990 --> 00:12:29.100
Xing Chen: And so on, by time I get to version for I've made another change to file eight I've made one change to file be and then I'm didn't make any change to file see from version three to four.

65
00:12:30.810 --> 00:12:44.280
Xing Chen: And so sometimes of VCs software only keep track of these changes as can see but as delta sign instead of saving a new copy of the file.

66
00:12:45.180 --> 00:13:06.840
Xing Chen: Every single at every single snapshot and recent doses. So basically it compares the file at this time points to the file at the next time going. And if there's changes it stores the changes and the changes. If a lot lighter usually been storing the whole file.

67
00:13:08.370 --> 00:13:27.660
Xing Chen: So let's say I have two pieces of code. I made a change to one line of code between versions. One and two and instead of starting a copy of the code in version one and the new copy of the new code and version two. It just has version one and then every costs down which line I changed.

68
00:13:29.910 --> 00:13:40.170
Xing Chen: And that way you don't have two files that are both particular size, but you have one file and then a very light memory of what was changed.

69
00:13:44.790 --> 00:13:53.400
Xing Chen: OK, so the other method is what I read a strike, which is to keep track of the picture, the complete picture at every moment in time.

70
00:13:53.850 --> 00:14:07.950
Xing Chen: So in version one I've got these three files and version two. Again, I saw copy off the file and so on and so forth. And as you can see, it takes up more memory to do it this way than to just keep track of the changes.

71
00:14:10.320 --> 00:14:27.270
Xing Chen: Okay, so how does PCs work. I have a local directory. So that's where I'm working with my files, I have to do something called staging the files, don't, don't worry too much about this, but it basically means that I'm preparing them to

72
00:14:28.290 --> 00:14:35.430
Xing Chen: Be committed to my directory. So my directory is basically the place where I have

73
00:14:36.480 --> 00:14:37.980
Xing Chen: The snapshots.

74
00:14:39.000 --> 00:14:54.630
Xing Chen: So I have to basically stage my files and then commit them and say, Okay, I've made these changes, please take a snapshot. And then if I want to make new changes, then I check out the project. So don't worry too much about these details.

75
00:14:56.100 --> 00:15:14.040
Xing Chen: I'm just going to give you an idea of what kind of software you can use as a very popular software which is called kit and it allows you to set up a repository. So you store all your code in a particular folder and the software will automatically keep track of all of these files.

76
00:15:15.840 --> 00:15:34.050
Xing Chen: So this is an example of the type of get software that I use, where basically if I have made changes to my file, it will highlight all the changes the extra called I added in green, and it will highlight all the code that I removed in red.

77
00:15:36.240 --> 00:15:44.880
Xing Chen: And I can basically click on all of my different snapshots and see what was changed at any given point in time.

78
00:15:47.490 --> 00:15:58.800
Xing Chen: And every time I make the comments to my repository. So I tell the software to make a snapshot, you get a comment box and you can enter in your reasons for making the changes.

79
00:16:00.690 --> 00:16:15.270
Xing Chen: So over here, you can see if I made changes to my code. I can enter in my summary and description here and that allows me to remember exactly why I made those changes and keep track of that.

80
00:16:17.370 --> 00:16:24.180
Xing Chen: And the nice thing, of course, of the red and green highlighting is that you can compare your called side by side. Very especially

81
00:16:25.890 --> 00:16:38.400
Xing Chen: OK. And then if you want to retrieve previous version of your call. You can roll that go at it. Oh, you can download the previous version and save it and I said you can compare your code and your changes manually.

82
00:16:39.510 --> 00:16:53.550
Xing Chen: So for example, let's say to this particular piece of code. I want to go back in time and restore the past or read and get rid of the parts that are green. So I can click on this icon and say roll back to this comments.

83
00:16:55.650 --> 00:17:09.390
Xing Chen: And kind of version control software also allows you to work separately on pieces of your code without interfering with each other. So sometimes, let's say your collaborators.

84
00:17:10.290 --> 00:17:19.290
Xing Chen: Have a part of your data and they wants to develop code analyze that. So it gives them a copy of your code, but you don't want them to break your code.

85
00:17:20.250 --> 00:17:34.230
Xing Chen: And maybe in the future if they are able to develop something that's useful you like to bring the code back and to be able to use that for yourself. So you have to then merge your two pieces of code.

86
00:17:35.580 --> 00:17:42.330
Xing Chen: That can get complicated if you tried to do it manually. Which is why this kind of software so great. And it can do it automatically.

87
00:17:46.500 --> 00:17:57.180
Xing Chen: So you do this by creating a branch and you can work on your version of the brand and they can work on your branch. And then at the end, you can merge the two branches so it looks like this.

88
00:17:57.750 --> 00:18:11.370
Xing Chen: We start with version one and let's say we have a working copy of the code. But I want to try and make some modifications to it. So I branch it out and I work on it, and meanwhile another collaborates

89
00:18:12.480 --> 00:18:20.790
Xing Chen: Is also working on it. So we branch it out. And so we can, if our new versions where we can merge it with the original version and merge it

90
00:18:23.190 --> 00:18:43.590
Xing Chen: Okay, so that was it. I hope I gave you a decent idea of how you can manage your, your code and your changes in your code. And basically, yeah, be able to very efficiently synchronize files back them up and share them with collaborative. This is something that

91
00:18:44.850 --> 00:18:58.770
Xing Chen: I use all the time. So I tried to regularly save the snapshots of my code and I do this every time I make a number of changes that I don't want to lose.

92
00:19:04.080 --> 00:19:05.100
Xing Chen: Any question.

93
00:19:23.220 --> 00:19:23.520
Yeah.

94
00:19:25.500 --> 00:19:25.980
Aline Mak: Yes.

95
00:19:29.640 --> 00:19:30.210
Xing Chen: Okay.

96
00:19:31.980 --> 00:19:36.150
Xing Chen: Questions I shoes here. So I tried to stop.

97
00:19:39.960 --> 00:19:40.800
Stop share

